<div class="container mt-4">
  <div id="notification" class="alert alert-success text-center position-fixed top-0 start-50 translate-middle-x mt-3 shadow"
      style="display: none; z-index: 1055;">
  </div>

  <h1 class="mb-4">‚≠ê <%= t("favorites.title") %></h1>

  <% if @favorites.any? %>
    <div class="product-grid">
      <% @favorites.each do |favorite| %>
        <% product = favorite.product %>
        <div class="product-card">
          <div class="product-thumb">
           <%= image_tag(product.images.attached? ? url_for(product.images.first) : "placeholder.jpg",
              alt: product.nombre,
              class: "img-fluid") %>
          </div>

          <div class="product-body">
            <h3 class="product-name"><%= product.nombre %></h3>
            <p class="product-desc"><%= truncate(product.descripcion, length: 80) %></p>
            <div class="product-meta">
              <span class="price">
                <%= number_to_currency(product.precio, unit: "$", separator: ".", delimiter: ",") %>
              </span>

              <div class="d-flex flex-wrap gap-2 mt-2">
                <!-- üîπ Bot√≥n agregar al carrito -->
                <%= button_to cart_items_path(product_id: product.id),
                              method: :post,
                              data: { turbo: false, remote: true },
                              class: "btn btn-sm btn-outline-primary d-flex align-items-center gap-1 add-to-cart",
                              form: { "data-product-id": product.id } do %>
                  <i class="fa-solid fa-cart-plus"></i>
                <% end %>

                <!-- üîπ Bot√≥n eliminar de favoritos -->
                <%= button_to favorite_path(favorite),
                              method: :delete,
                              data: { remote: true },
                              class: "btn btn-sm btn-warning d-flex align-items-center gap-1 remove-favorite",
                              form: { "data-favorite-id": favorite.id } do %>
                  <i class="fa-solid fa-star"></i>
                <% end %>
              </div>
            </div>
          </div>
        </div>
      <% end %>
    </div>
  <% else %>
    <p><%= t("favorites.empty") %></p>
  <% end %>
</div>

<!-- Modal -->
<div class="modal fade" id="productoModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalProductoNombre"></h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body d-flex flex-column flex-md-row">
        <img id="modalProductoImagen" src="" class="img-fluid me-3 mb-3 mb-md-0" style="max-width: 250px;">
        <div>
          <p id="modalProductoDescripcion"></p>
          <p class="fw-bold fs-5" id="modalProductoPrecio"></p>
        </div>
      </div>
      <div class="modal-footer">
        <form id="modalCompraForm" method="post">
          <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
          <button type="submit" class="btn btn-primary">
            <i class="fa-solid fa-cart-plus"></i> <%= t("productos.boton.comprar") %>
          </button>
        </form>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><%= t("productos.boton.cerrar") %></button>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const csrfToken = document.querySelector('meta[name="csrf-token"]').content;
  const notification = document.getElementById('notification');

  // üîπ Mostrar notificaci√≥n animada
  function showNotification(message, type = 'success') {
    notification.textContent = message;
    notification.className = `alert alert-${type} text-center position-fixed top-0 start-50 translate-middle-x mt-3 shadow`;
    notification.style.display = 'block';
    notification.style.opacity = 0;
    setTimeout(() => notification.style.opacity = 1, 50);
    setTimeout(() => {
      notification.style.opacity = 0;
      setTimeout(() => notification.style.display = 'none', 300);
    }, 2500);
  }

  // üîπ Agregar al carrito sin recargar
  document.addEventListener('click', async (e) => {
    const btn = e.target.closest('.add-to-cart');
    if (!btn) return;

    e.preventDefault();
    const form = btn.closest('form');

    try {
      const response = await fetch(form.action, {
        method: 'POST',
        headers: {
          'X-CSRF-Token': csrfToken,
          'Accept': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();

        // ‚úÖ Actualiza contador del carrito
        const cartCount = document.getElementById('cart_count');
        if (cartCount && data.count !== undefined) {
          cartCount.textContent = data.count;
        }

        // ‚úÖ Actualiza el contenido del carrito lateral (offcanvas)
        const cartOffcanvasBody = document.getElementById('cart-offcanvas-body');
        if (cartOffcanvasBody && data.cart_html) {
          cartOffcanvasBody.innerHTML = data.cart_html;
        }

        showNotification('‚úÖ Producto agregado al carrito');
      } else {
        showNotification('‚ö†Ô∏è Error al agregar al carrito', 'danger');
      }
    } catch (error) {
      console.error(error);
      showNotification('‚ö†Ô∏è Error de conexi√≥n', 'danger');
    }
  });

  // üîπ Eliminar de favoritos sin recargar
  document.addEventListener('click', async (e) => {
    const btn = e.target.closest('.remove-favorite');
    if (!btn) return;

    e.preventDefault();
    const form = btn.closest('form');
    const card = btn.closest('.product-card');

    try {
      const response = await fetch(form.action, {
        method: 'DELETE',
        headers: {
          'X-CSRF-Token': csrfToken,
          'Accept': 'application/json'
        }
      });

      if (response.ok) {
        card.remove();
        showNotification('‚≠ê Eliminado de favoritos');
      } else {
        showNotification('‚ö†Ô∏è No se pudo eliminar', 'danger');
      }
    } catch (error) {
      console.error(error);
      showNotification('‚ö†Ô∏è Error de conexi√≥n', 'danger');
    }
  });
});
</script>
