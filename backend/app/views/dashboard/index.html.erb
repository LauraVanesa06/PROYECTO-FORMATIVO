<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Dashboard Ferreter√≠a</title> 
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-chart-radial-gauge@^0.3.0/dist/chartjs-chart-radial-gauge.min.js"></script>
  <%= favicon_link_tag 'favicon.png' %>
  <%= stylesheet_link_tag "dashboard", media: "all" %>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Eczar:wght@400;500;600;700;800&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@700&display=swap" rel="stylesheet">
</head>
<body>

  <header>
    <div class="container-header">
      <button class="hamburger" id="hamburger">&#9776;</button>
      <p class="pricipal">Ferremateriales el Maestro - Dashboard</p>
      <% if user_signed_in? %>
        <%= button_to destroy_user_session_path, method: :delete, form: { data: { turbo: true } }, id: "cerrar", class: "logout2" do %>
          <span><i class="fas fa-sign-out-alt"></i></span>
        <% end %>
      <% end %>
    </div>
  </header>

  <nav class="nav-bg">
    <div class="container-nav">
      <ul class="menu" id="menu">
        <li><a href="dashboard"class="link-menu">Inicio</a></li>
        <li><a href="inventario"class="link-menu">Inventario</a></li>
        <li><a href="ventas"class="link-menu">Ventas</a></li>
        <li><a href="suppliers"class="link-menu">Proveedores</a></li>
        <li><a href="clientes"class="link-menu">Clientes</a></li>
      </ul>
      <% if user_signed_in? %>
        <%= button_to "Cerrar sesi√≥n", destroy_user_session_path, method: :delete, form: { data: { turbo: true } }, id: "cerrar", class: "logout"%>
      <% end %>
    </div>
  </nav>

  <section class="fondo">
    <section class="section-1">
      <div class="grafica-1">
        <section class="graf-1">
          <canvas id="graficoClientesMes"></canvas>
        </section>
        <section class="texto-1">
          <div class="titulo-1">Registros de clientes nuevos</div>
          <div class="texto-1-1">Este dato permite visualizar la evoluci√≥n del negocio y el ritmo con el que se incrementa la cantidad
             de personas que acceden por primera vez a nuestros productos y servicios.</div>
        </section>
      </div>
      <div class="grafica-2">
        <section class="texto-2">
          <section class="texto-2-1"><div class="titulo-2">Ventas por categor√≠a de producto</div>Este gr√°fico presenta la distribuci√≥n de
            ventas por categor√≠as de productos, permitiendo identificar cu√°les generan mayores ingresos y aportan m√°s al rendimiento general del negocio.
          </section>
          <div class="img-2">
            <canvas id="gaugeSegmentado"></canvas>
            <div class="gauge-value">Stock<br>90%</div>
          </div>
        </section>
        <section class="graf-2">
          <canvas id="graficoVentas" ></canvas>
        </section>
      </div>
      <div class="grafica-3">
        <section>
          <div class="ingresos">
            <p class="flecha" id="F1">ü°Ö</p>
            <p class="etiqueta">Ingresos</p>
            <p class="monto">$25.000.000</p>
          </div>
          <!--<div class="contenedor-moneda">
            <div class="texto-centro">
              <div class="flecha">‚Üë</div>
              <div class="etiqueta">Ingresos</div>
              <div class="monto">$3.250.000</div>
          </div>-->
          <div class="texto-3">Total de dinero recibido por ventas y otras entradas durante el periodo.</div>
        </section>
        <section>
          <div class="egresos">
            <p class="monto">$21.100.000</p>
            <p class="etiqueta">Egresos</p>
            <p class="flecha" id="F2">ü°á</p>
          </div>
          <div class="texto-3">Total de dinero destinado a compras, pagos y gastos operativos del periodo.</div>
        </section>
      </div>
    </section>

    <section class="section-2">
      <div class="grafica-4">
        <section class="texto-4">
          <div class="texto-4-2"><div class="titulo-4">Ventas por m√©todo de pago y canal</div>Este gr√°fico muestra las ventas seg√∫n su canal de origen 
            (f√≠sica, online y por cotizaci√≥n) y el m√©todo de pago utilizado en tienda. La informaci√≥n permite analizar el comportamiento de compra del
            cliente y mejorar la gesti√≥n comercial y financiera.</div>
            <div class="graf-4-1">
              <!-- Ventas online -->
              <div>
                <div class="gauge">
                  <canvas id="gaugeOnline"></canvas>
                  <div class="gauge-label">0%</div>
                </div>
                <div class="gauge-title">Online</div>
              </div>

              <!-- Efectivo -->
              <div>
                <div class="gauge">
                  <canvas id="gaugeEfectivo"></canvas>
                  <div class="gauge-label">0%</div>
                </div>
                <div class="gauge-title">Efectivo</div>
              </div>

              <!-- Cotizadas -->
              <div>
                <div class="gauge">
                  <canvas id="gaugeCotizadas"></canvas>
                  <div class="gauge-label">0%</div>
                </div>
                <div class="gauge-title">Cotizadas</div>
              </div>
            </div>
        </section>
        <section class="graf-4-2">
          <div class="titulo-4-2">Ventas por M√©todo de Pago</div>
          <canvas id="graficoPago"></canvas>
        </section>
      </div>
      <div class="grafica-5">
        <section class="texto-5"><div class="titulo-5">Ventas por d√≠a / semana / mes</div>Esta secci√≥n muestra el total de ventas realizadas durante el periodo 
        seleccionado (diario, semanal o mensual). La informaci√≥n permite identificar tendencias, evaluar el rendimiento y apoyar la toma de decisiones estrat√©gicas.</section>

        <section class="graf-5">

          <!-- Dia -->
          <div class="grafico">
            <canvas id="grafDia" width="120" height="120"></canvas>
          </div>

          <!--Semana -->
          <div class="grafico">
            <canvas id="grafSemana" width="120" height="120"></canvas>
          </div>

          <!-- Mes -->
          <div class="grafico">
            <canvas id="grafMes" width="120" height="120"></canvas>
          </div>

        </section>

      </div>
    </section>
  </section>

  <footer>
    &copy; 2025 Ferremateriales el Maestro - v2.3.7
  </footer>

  <!-- grfaica de la seccion 1 -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
  fetch('/api/v1/clientes_por_mes')
    .then(res => res.json())
    .then(data => {
      const meses = [
        'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
        'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
      ];

      const valores = Object.values(data);
      const etiquetas = Object.keys(data).map(num => meses[parseInt(num) - 1]);

      const ctx = document.getElementById('graficoClientesMes').getContext('2d');

      new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: etiquetas,
          datasets: [{
            data: valores,
            backgroundColor: [
              '#5D4037', // Marr√≥n chocolate
              '#6D4C41', // Marr√≥n medio
              '#795548',
              '#8D6E63',
              '#4E342E', // Marr√≥n oscuro
              '#3E2723',
              '#A1887F',
              '#704214',
              '#654321',
              '#7B5E57',
              '#5C4033',
              '#4B3621'
            ],
            borderColor: '#333',
            borderWidth: 1,
            cutout: '40%'
          }]
        },
        options: {
          plugins: {
            legend: { display: false },
            datalabels: {
              color: 'white',
              font: {
                weight: 'bold',
                size: 12
              },
              formatter: (value, context) =>
                context.chart.data.labels[context.dataIndex] + ': ' + value
            }
          }
        },
        plugins: [ChartDataLabels]
      });
    })
    .catch(error => console.error("Error cargando clientes por mes:", error));
});

</script>


<!-- grafica 1 de la seccion 2 -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
  fetch('/api/v1/dashboard/porcentaje_stock')
    .then(res => res.json())
    .then(data => {
      const porcentaje = data.porcentaje;
      const totalSegmentos = 30;
      const segmentosActivos = Math.round((porcentaje / 100) * totalSegmentos);
      const datos = Array(totalSegmentos).fill(1);
      const colores = Array.from({ length: totalSegmentos }, (_, i) =>
        i < segmentosActivos ? 'white' : '#424242'
      );

      new Chart(document.getElementById('gaugeSegmentado'), {
        type: 'doughnut',
        data: {
          datasets: [{
            data: datos,
            backgroundColor: colores,
            borderColor: 'grey',
            borderWidth: 2,
            hoverOffset: 0
          }]
        },
        options: {
          cutout: '65%',
          rotation: -90,
          circumference: 360,
          plugins: {
            legend: { display: false },
            tooltip: { enabled: false }
          }
        }
      });

      const valorDiv = document.querySelector('.gauge-value');
      if (valorDiv) valorDiv.innerHTML = `Stock<br>${porcentaje}%`;
    })
    .catch(error => console.error("Error cargando porcentaje de stock:", error));
});
</script>

<!-- grafica 2 de la seccion 2 -->
<script>
document.addEventListener('DOMContentLoaded', () => {
  fetch('/api/v1/ventas_por_categoria')
    .then(res => res.json())
    .then(data => {
      const ctx2 = document.getElementById('graficoVentas').getContext('2d');

      const colores = Array(data.valores.length).fill('#8D6E63'); // marr√≥n medio

      new Chart(ctx2, {
        type: 'bar',
        data: {
          labels: data.etiquetas,
          datasets: [{
            label: 'Ventas (unidades)',
            data: data.valores,
            backgroundColor: colores,
            borderColor: colores,
            borderWidth: 1
          }]
        },
        options: {
          indexAxis: 'y',
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: { display: false },
            datalabels: {
              align: 'start',
              anchor: 'end',
              color: 'white',
              formatter: (value, context) =>
                context.chart.data.labels[context.dataIndex] + ' (' + value + ')',
              font: {
                size: 12,
                weight: 'bold'
              }
            }
          },
          scales: {
            x: {
              beginAtZero: true,
              ticks: { color: 'white' },
              title: {
                display: true,
                text: 'Unidades vendidas',
                color: 'white'
              },
              grid: { color: 'rgba(255,255,255,0.1)' }
            },
            y: {
              ticks: { display: false },
              grid: { display: false }
            }
          }
        },
        plugins: [ChartDataLabels]
      });
    })
    .catch(err => console.error('Error al cargar ventas por categor√≠a:', err));
});

</script>

<!-- grafica de la seccion 3 -->


<!-- grafica 1 de la seccion 4 -->
<script>
    const crearGauge = (ctxId, porcentaje) => {
    const ctx = document.getElementById(ctxId).getContext('2d');
    new Chart(ctx, {
      type: 'doughnut',
      data: {
        datasets: [{
          data: [porcentaje, 100 - porcentaje],
          backgroundColor: ['#FF4081', '#383838'],
          borderColor: 'grey',
          borderWidth: 1,
          cutout: '3%'
        }]
      },
      options: {
        responsive: false,
        plugins: {
          legend: { display: false },
          tooltip: { enabled: false }
        }
      }
    });
  };

  fetch('/api/v1/ventas_por_canal')
    .then(res => res.json())
    .then(data => {
      crearGauge('gaugeOnline', data.online);
      crearGauge('gaugeEfectivo', data.efectivo);
      crearGauge('gaugeCotizadas', data.cotizadas);

      document.querySelector('#gaugeOnline + .gauge-label').textContent = `${data.online}%`;
      document.querySelector('#gaugeEfectivo + .gauge-label').textContent = `${data.efectivo}%`;
      document.querySelector('#gaugeCotizadas + .gauge-label').textContent = `${data.cotizadas}%`;
    })
    .catch(err => console.error('Error al cargar ventas por canal:', err));
</script>

<!-- grafica 2 de la seccion 4 -->
<script>
  const canvas = document.getElementById('graficoPago');
  const ctx = canvas.getContext('2d');

  const scale = window.devicePixelRatio || 1;
  const visibleWidth = 500;
  const visibleHeight = 300;

  canvas.width = visibleWidth * scale;
  canvas.height = visibleHeight * scale;
  canvas.style.width = visibleWidth + 'px';
  canvas.style.height = visibleHeight + 'px';
  ctx.scale(scale, scale);

  fetch('/api/v1/ventas_por_metodo_pago')
    .then(res => res.json())
    .then(data => {
      new Chart(ctx, {
        type: 'bar',
        data: {
          labels: data.etiquetas,
          datasets: [{
            data: data.valores,
            backgroundColor: ['#f8bbd0', '#f06292', '#ec407a', '#e91e63'],
            borderRadius: 5,
            borderSkipped: false
          }]
        },
        options: {
          responsive: false,
          plugins: {
            legend: { display: false },
            tooltip: { enabled: false },
            datalabels: {
              anchor: 'end',
              align: 'top',
              offset: 4,
              color: 'white',
              font: {
                family: 'Segoe UI',
                weight: 'bold',
                size: 30
              },
              formatter: function(value) {
                return value;
              }
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              max: 100,  // ajusta seg√∫n tu caso
              ticks: {
                color: '#ffffff',
                font: {
                  size: 20
                }
              },
              grid: {
                color: '#666',
              }
            },
            x: {
              ticks: {
                color: '#ffffff',
                font: {
                  size: 20
                }
              },
              grid: {
                color: '#666'
              }
            }
          }
        },
        plugins: [ChartDataLabels]
      });
    })
    .catch(err => console.error('Error al cargar datos:', err));
</script>


<!-- grafica del seccion 5 -->
<script>
function crearDoughnut(id, cantidad, label) {
  const ctx = document.getElementById(id).getContext('2d');

  const centroTexto = {
    id: 'centroTexto',
    beforeDraw(chart) {
      const { width } = chart;
      const { height } = chart;
      const ctx = chart.ctx;
      ctx.restore();
      const fontSize = 16;
      ctx.font = `bold ${fontSize}px Poppins`;
      ctx.fillStyle = 'white';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';

      ctx.fillText(label, width / 2, height / 2 - 10);
      ctx.fillText(cantidad, width / 2, height / 2 + 10);
      ctx.save();
    }
  };

  new Chart(ctx, {
    type: 'doughnut',
    data: {
      labels: ['Dato', 'Restante'],
      datasets: [{
        data: [cantidad, 200 - cantidad],
        backgroundColor: ['#7E57C2', '#383838'],
        borderColor: ['transparent', 'transparent'],
        borderWidth: 2
      }]
    },
    options: {
      cutout: '85%',
      responsive: false,
      plugins: {
        legend: { display: false },
        tooltip: { enabled: false }
      }
    },
    plugins: [centroTexto]
  });
}
  

  fetch('/api/v1/inventario_por_categoria')
  .then(res => res.json())
  .then(data => {
    new Chart(document.getElementById('tortaChart'), {
      type: 'pie',
      data: {
        labels: data.labels,
        datasets: [{
          label: 'Inventario por categor√≠a',
          data: data.valores,
          backgroundColor: ['#4A90E2', '#5DADE2', '#85C1E9', '#AED6F1', '#6FB1FC', '#3A78C5'],
          borderColor: 'black',
          borderWidth: 2
        }]
      },
      options: {
        radius: '90%', // <= m√°s peque√±o
        plugins: {
          legend: {
            position: 'bottom',
            labels: {
              color: '#ffffff',
              font: {
                size: 10 // <= tama√±o de texto m√°s peque√±o
              }
            }
          }
        }
      }
    });
  });

  fetch('/api/v1/ventas_mensuales')
  .then(res => res.json())
  .then(data => {
    new Chart(document.getElementById('lineChart'), {
      type: 'line',
      data: {
        labels: data.labels, // Aseg√∫rate de que data.labels contenga meses en espa√±ol
        datasets: [{
          label: 'Ventas mensuales', // T√≠tulo traducido
          data: data.valores,
          borderColor: 'black',
          backgroundColor: '#3498DB',
          fill: false,
          tension: 0.3
        }]
      },
      options: {
        plugins: {
          legend: {
            labels: {
              color: 'white',
              font: {
                family: 'sans-serif',
                size: 14
              }
            }
          }
        },
        scales: {
          x: {
            ticks: {
              color: '#ffffff',
            }
          },
          y: {
            beginAtZero: true,
            ticks: {
              color: '#ffffff',
              callback: value => '$' + value // formato moneda opcional
            }
          }
        }
      }
    });
  });

fetch('/api/v1/ventas_periodo')
  .then(res => res.json())
  .then(data => {
    crearDoughnut('grafDia', data.dia, 'D√≠a');
    crearDoughnut('grafSemana', data.semana, 'Semana');
    crearDoughnut('grafMes', data.mes, 'Mes');
  })
  .catch(error => console.error('Error al cargar ventas por periodo:', error));
</script>

</body>
</html>